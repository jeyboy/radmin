#new
  = form_for @object, url: new_path(model_name: current_model.to_param), as: current_model.param_key, html: { multipart: true, class: "form-horizontal", data: { title: @page_name } } do |form|

    - groups = current_model.show.with_bindings(**bindings, form: form).visible_groups(has_visible_fields: false)
    - groups.each do |name, fieldset|
      - fields = fieldset.visible_fields

      - unless fields.empty?
        - if fieldset.name != nil
          %legend
            %i{ class: "icon-chevron-#{(fieldset.active? ? 'down' : 'right')}"}
              = fieldset.label

          - if fieldset.help.present?
            %p= fieldset.help

          %div
            - fields.each do |field|
              field_wrapper_for(field, nested_in)

    -#visible_groups(options[:model_config], generator_action(options[:action], options[:nested_in])).collect do |fieldset|
    -#        fieldset_for fieldset, options[:nested_in]
    -#end.join.html_safe +
    -#(options[:nested_in] ? '' : @template.render(partial: 'rails_admin/main/submit_buttons'))
    -#
    -#model_config.send(action).with(
    -#  form: self,
    -#  object: @object,
    -#  view: @template,
    -#  controller: @template.controller,
    -#).visible_groups
    -#
    -#def fieldset_for(fieldset, nested_in)
    -#  fields = fieldset.with(
    -#    form: self,
    -#    object: @object,
    -#    view: @template,
    -#    controller: @template.controller,
    -#  ).visible_fields
    -#  return if fields.empty?
    -#
    -#  @template.content_tag :fieldset do
    -#    contents = []
    -#    contents << @template.content_tag(:legend, %(<i class="icon-chevron-#{(fieldset.active? ? 'down' : 'right')}"></i> #{fieldset.label}).html_safe, style: fieldset.name == :default ? 'display:none' : '')
    -#    contents << @template.content_tag(:p, fieldset.help) if fieldset.help.present?
    -#    contents << fields.collect { |field| field_wrapper_for(field, nested_in) }.join
    -#    contents.join.html_safe
    -#  end
    -#end
    -#
    -#def field_wrapper_for(field, nested_in)
    -#  if field.label
    -#    # do not show nested field if the target is the origin
    -#    unless nested_field_association?(field, nested_in)
    -#      @template.content_tag(:div, class: "form-group control-group #{field.type_css_class} #{field.css_class} #{'error' if field.errors.present?}", id: "#{dom_id(field)}_field") do
    -#        label(field.method_name, capitalize_first_letter(field.label), class: 'col-sm-2 control-label') +
    -#          (field.nested_form ? field_for(field) : input_for(field))
    -#      end
    -#    end
    -#  else
    -#    field.nested_form ? field_for(field) : input_for(field)
    -#  end
    -#end
    -#
    -#def input_for(field)
    -#  css = 'col-sm-10 controls'
    -#  css += ' has-error' if field.errors.present?
    -#  @template.content_tag(:div, class: css) do
    -#    field_for(field) +
    -#      errors_for(field) +
    -#      help_for(field)
    -#  end
    -#end
    -#
    -#def errors_for(field)
    -#  field.errors.present? ? @template.content_tag(:span, field.errors.to_sentence, class: 'help-inline text-danger') : ''.html_safe
    -#end
    -#
    -#def help_for(field)
    -#  field.help.present? ? @template.content_tag(:span, field.help, class: 'help-block') : ''.html_safe
    -#end
    -#
    -#def field_for(field)
    -#  field.read_only? ? @template.content_tag(:div, field.pretty_value, class: 'form-control-static') : field.render
    -#end
    -#
    -#def object_infos
    -#  model_config = RailsAdmin.config(object)
    -#  model_label = model_config.label
    -#  object_label = begin
    -#    if object.new_record?
    -#      I18n.t('admin.form.new_model', name: model_label)
    -#    else
    -#      object.send(model_config.object_label_method).presence || "#{model_config.label} ##{object.id}"
    -#    end
    -#  end
    -#  %(<span style="display:none" class="object-infos" data-model-label="#{model_label}" data-object-label="#{CGI.escapeHTML(object_label.to_s)}"></span>).html_safe
    -#end
    -#
    -#def jquery_namespace(field)
    -#  %(#{'#modal ' if @template.controller.params[:modal]}##{dom_id(field)}_field)
    -#end
    -#
    -#def dom_id(field)
    -#  (@dom_id ||= {})[field.name] ||=
    -#    [
    -#      @object_name.to_s.gsub(/\]\[|[^-a-zA-Z0-9:.]/, '_').sub(/_$/, ''),
    -#      options[:index],
    -#      field.method_name,
    -#    ].reject(&:blank?).join('_')
    -#end