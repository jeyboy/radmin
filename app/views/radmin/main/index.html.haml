:ruby
  query = params[:query]

  params = request.params.except(:authenticity_token, :action, :controller, :utf8, :bulk_export, :_pjax)

  params.delete(:query) if query.blank?
  params.delete(:sort_reverse) unless params[:sort_reverse] == 'true'

  sort_reverse = params[:sort_reverse]
  sort = params[:sort]
  params.delete(:sort) if params[:sort] == current_model.list.sort_by.to_s

  description = current_model.description

  properties = current_model.list.with_bindings(controller: self.controller, view: self, object: current_model.model.new).visible_fields
  checkboxes = current_model.list.show_checkboxes

  # columns paginate
  #sets = get_column_sets(properties)
  #properties = sets[params[:set].to_i] || []
  other_left = false #((params[:set].to_i - 1) >= 0) && sets[params[:set].to_i - 1].present?
  other_right = false #sets[params[:set].to_i + 1].present?

- content_for :contextual_tabs do
  - if checkboxes
    = bulk_menu

:javascript
  jQuery(function($) {
  #{ordered_filter_string}
  });

-#%style
-#  - properties.each do |property|
-#    - next unless property.column_width.present?
-#
-#    = "#list th.#{property.css_class} { width: #{property.column_width}px; min-width: #{property.column_width}px; }"
-#    = "#list td.#{property.css_class} { max-width: #{property.column_width}px;Â }"

%hr.border-bottom.border-dark

#list
  = form_tag(index_path(params.except(*%w[page f query])), method: :get, class: "pjax-form form-inline") do
    .well.w-100
      %span#filters_box
      %hr.filters_box{style: "display:#{ordered_filters.empty? ? 'none' : 'block'}"}

      .btn-toolbar.mb-2{"aria-label" => "Toolbar with button groups", role: 'toolbar' }
        - if filterable_fields.present?
          .btn-group.mr-2{"aria-label" => "First group", role: 'group' }
            %button#btn_filter_list.btn.btn-secondary.dropdown-toggle{ 'aria-expanded' => 'false', 'aria-haspopup' => 'true', 'data-toggle' => 'dropdown', type: 'button'}
              = fa_icon('filter', type: :solid)
              = t('admin.misc.add_filter')
            .dropdown-menu{ 'aria-labelledby' => 'btn_filter_list' }
              - filterable_fields.each do |field|
                - field_options = case field.type
                  - when :enum
                    - options_for_select(field.with(object: current_model.model.new).enum)
                  - else
                    - ''

                %a.dropdown-item{href: '#', :"data-field-label" => field.label, :"data-field-name" => field.name, :"data-field-options" => field_options.html_safe, :"data-field-type" => field.type, :"data-field-value" => "", :"data-field-datetimepicker-format" => (field.try(:parser) && field.parser.to_momentjs)}= capitalize_first_letter(field.label)

        .input-group
          %input.mr-1.form-control.input-small{name: "query", type: "search", value: query, placeholder: t("admin.misc.filter")}
          %span.input-group-btn
            %button.btn.btn-success{type: 'submit', :'data-disable-with' => '<i class="icon-white icon-refresh"></i> '.html_safe + t('admin.misc.refresh')}
              = fa_icon('sync-alt', type: :solid)
              = t('admin.misc.refresh')
            %button#remove_filter.btn.btn-danger{title: "Reset filters"}
              = fa_icon('trash', type: :solid)
              = t('admin.misc.reset')

    - scoped_actions = Radmin::Actions.list(:scopeable)

    - if scoped_actions.present?
      .well.mb-2.w-100
        - lnk_params = params.except('set').except('page')

        - scoped_actions.each do |scope_action|
          .btn-group{ role: 'group' }
            %span= link_to wording_for(:filtered_link, scope_action), send("#{scope_action.action_name}_path", lnk_params), class: 'btn btn-info', style: 'margin: 2px 0'

  %hr.border-bottom.border-dark

  - unless current_model.list.scopes.empty?
    %ul.nav.nav-tabs#scope_selector
      - current_model.list.scopes.each_with_index do |scope, index|
        - scope = '_all' if scope.nil?
        %li{class: "#{'active' if scope.to_s == params[:scope] || (params[:scope].blank? && index == 0)}"}
          %a{href: index_path(params.merge(scope: scope, page: nil)), class: 'pjax'}= I18n.t("admin.scopes.#{current_model.to_param}.#{scope}", default: I18n.t("admin.scopes.#{scope}", default: scope.to_s.titleize))

  = form_tag bulk_action_path(model_name: current_model.to_param), method: :post, id: "bulk_form", class: "form" do
    = hidden_field_tag :bulk_action
    - if description.present?
      %p
        %strong= description

    %table.radmin.table.table-sm.table-striped
      %thead
        %tr
          - if checkboxes
            %th.shrink
              %input.toggle{type: "checkbox"}
          - if other_left
            %th.other.left.shrink= "..."
          - properties.each do |property|
            - selected = (sort == property.name.to_s)
            - if property.sortable
              - sort_location = index_path params.except('sort_reverse').except('page').merge(sort: property.name).merge(selected && sort_reverse != "true" ? {sort_reverse: "true"} : {})
              - sort_direction = (sort_reverse == 'true' ? "headerSortUp" : "headerSortDown" if selected)
            %th{class: "#{property.sortable && "header pjax" || nil} #{sort_direction if property.sortable && sort_direction} #{property.css_class} #{property.type_css_class}", :'data-href' => (property.sortable && sort_location), rel: "tooltip", title: "#{property.hint}"}= capitalize_first_letter(property.label)
          - if other_right
            %th.other.right.shrink= "..."
          %th.last.shrink
      %tbody
        - @objects.each do |object|
          %tr{class: "#{current_model.param_key}_row #{current_model.list.with_bindings(object: object).row_css_class}"}
            - if checkboxes
              %td= check_box_tag "bulk_ids[]", object.id, false
            - if @other_left_link ||= other_left && index_path(params.except('set').merge(params[:set].to_i != 1 ? {set: (params[:set].to_i - 1)} : {}))
              %td.other.left= link_to "...", @other_left_link, class: 'pjax'
            - properties.map{ |property| property.with_bindings(object: object) }.each do |property|
              - value = property.pretty_value
              %td{class: "#{property.css_class} #{property.type_css_class}", title: strip_tags(value.to_s)}= value
            - if @other_right_link ||= other_right && index_path(params.merge(set: (params[:set].to_i + 1)))
              %td.other.right= link_to "...", @other_right_link, class: 'pjax'
            %td.last.links
              %ul.inline.list-inline= menu_for :member, current_model, object, true

    - if current_model.list.compact_pagination
      .row
        .col-md-6= paginate(@objects, theme: 'radmin_bootstrap/without_count', total_pages: Float::INFINITY, remote: true)

    - elsif @objects.respond_to?(:total_count)
      - total_count = @objects.total_count.to_i
      .row
        .col-md-6= paginate(@objects, theme: 'radmin_bootstrap', remote: true)
      .row
        .col-md-6= link_to(t("admin.misc.show_all"), index_path(params.merge(all: true)), class: "show-all btn btn-default clearfix pjax") unless total_count > 100 || total_count <= @objects.to_a.size
      .clearfix.total-count= "#{total_count} #{current_model.pluralize(total_count).downcase}"

    - else
      .clearfix.total-count= "#{@objects.size} #{current_model.pluralize(@objects.size).downcase}"
